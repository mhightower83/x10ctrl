<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0">
<meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">

<!--Details for this are from: https://developers.google.com/web/fundamentals/web-app-manifest/ -->
<!--<link rel="manifest" href="http://hapi/manifest.json">-->
<link rel="manifest" href="/manifest.json">

<link href="https://fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">

<title>HA Remote</title>

<style>
/* Chrome, Safari and Opera syntax */
:-webkit-full-screen {
  background-color: black;
  color: white;
}

/* Firefox syntax */
:-moz-full-screen {
  background-color: black;
  color: white;
}

/* IE/Edge syntax */
:-ms-fullscreen {
  background-color: black;
  color: white;w;
}

/* Standard syntax */
:fullscreen {
  background-color: black;
  color: white;
}

.centered {
  position: fixed; /* or absolute */
  top: 50%;
  left: 50%;
  /* bring your own prefixes */
  overflow-y: auto;   /* allows verticle scroll */
  height: 100%;
  transform: translate(-50%, -50%);
}
/*D
.offscreen {
    left: -9999px;
    position: relative;
} */

html, body {
    font-family: 'Open Sans', Helvetica, Arial, sans-serif;
    font-size: 1em;
    line-height: 1.5;
    word-wrap: break-word;
    background-color: black;
    color: white;
}

td {
    font-family: 'Open Sans', Helvetica, Arial, sans-serif;
    font-size: 1.3em;
  	font-weight: bold;
}

#targetDiv {
    width: 100%
}

h1 {
    font-size: 2em;
    font-weight: bold;
    margin: 0;
    padding: 0;
}

.device {  /* Device Name field of table */
  width: 100%;
}

.container {
	text-align: center;
}

/* Buttons from https://www.bestcssbuttongenerator.com/ */
/* Usage: <a href="#" class="myButtonOn">On</a>*/
.myButtonOn {
	-moz-box-shadow:inset 0px 1px 0px 0px #caefab;
	-webkit-box-shadow:inset 0px 1px 0px 0px #caefab;
	box-shadow:inset 0px 1px 0px 0px #caefab;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #77d42a), color-stop(1, #5cb811));
	background:-moz-linear-gradient(top, #77d42a 5%, #5cb811 100%);
	background:-webkit-linear-gradient(top, #77d42a 5%, #5cb811 100%);
	background:-o-linear-gradient(top, #77d42a 5%, #5cb811 100%);
	background:-ms-linear-gradient(top, #77d42a 5%, #5cb811 100%);
	background:linear-gradient(to bottom, #77d42a 5%, #5cb811 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#77d42a', endColorstr='#5cb811',GradientType=0);
	background-color:#77d42a;
	-moz-border-radius:16px;
	-webkit-border-radius:16px;
	border-radius:16px;
	border:1px solid #268a16;
	display:inline-block;
	cursor:pointer;
	color:#306108;
	/*font-family:Arial;*/
	/*font-size:15px;*/
	font-size:1.2em;
	font-weight:bold;
	padding:16px 16px;
	text-decoration:none;
	text-shadow:0px 1px 0px #aade7c;
}
.myButtonOn:hover {
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #5cb811), color-stop(1, #77d42a));
	background:-moz-linear-gradient(top, #5cb811 5%, #77d42a 100%);
	background:-webkit-linear-gradient(top, #5cb811 5%, #77d42a 100%);
	background:-o-linear-gradient(top, #5cb811 5%, #77d42a 100%);
	background:-ms-linear-gradient(top, #5cb811 5%, #77d42a 100%);
	background:linear-gradient(to bottom, #5cb811 5%, #77d42a 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#5cb811', endColorstr='#77d42a',GradientType=0);
	background-color:#5cb811;
}
.myButtonOn:active {
	position:relative;
	top:1px;
}
/* Usage: <a href="#" class="myButtonOn">On</a>*/

/* Usage: <a href="#" class="myButtonOff">Off</a>*/

.myButtonOff {
	-moz-box-shadow:inset 0px 1px 0px 0px #f5978e;
	-webkit-box-shadow:inset 0px 1px 0px 0px #f5978e;
	box-shadow:inset 0px 1px 0px 0px #f5978e;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #f24537), color-stop(1, #c62d1f));
	background:-moz-linear-gradient(top, #f24537 5%, #c62d1f 100%);
	background:-webkit-linear-gradient(top, #f24537 5%, #c62d1f 100%);
	background:-o-linear-gradient(top, #f24537 5%, #c62d1f 100%);
	background:-ms-linear-gradient(top, #f24537 5%, #c62d1f 100%);
	background:linear-gradient(to bottom, #f24537 5%, #c62d1f 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#f24537', endColorstr='#c62d1f',GradientType=0);
	background-color:#f24537;
	-moz-border-radius:16px;
	-webkit-border-radius:16px;
	border-radius:16px;
	border:1px solid #d02718;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	/*font-family:Arial;*/
	/*font-size:15px;*/
	font-size:1.2em;
	font-weight:bold;
	padding:16px 16px;
	text-decoration:none;
	text-shadow:0px 1px 0px #810e05;
}

.myButtonOff:hover {
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #c62d1f), color-stop(1, #f24537));
	background:-moz-linear-gradient(top, #c62d1f 5%, #f24537 100%);
	background:-webkit-linear-gradient(top, #c62d1f 5%, #f24537 100%);
	background:-o-linear-gradient(top, #c62d1f 5%, #f24537 100%);
	background:-ms-linear-gradient(top, #c62d1f 5%, #f24537 100%);
	background:linear-gradient(to bottom, #c62d1f 5%, #f24537 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#c62d1f', endColorstr='#f24537',GradientType=0);
	background-color:#c62d1f;
}

.myButtonOff:active {
	position:relative;
	top:1px;
}

.logging {
    font-family: 'Source Code Pro', monospace;
    font-size: 1em;
    line-height: 1.25;
}

.logging blockquote,
.logging dl,
.logging ol,
.logging p,
.logging pre,
.logging table,
.logging ul {
    margin-bottom: 16px;
    margin-top: 0
}

.logging pre + blockquote {
    margin-top: -16px;
}

</style>
</head>
<body>
<div id="targetDiv" class="centered"></div>

<script>

var debugIsOn = false;
var refresh = false;

function debugOn() {
    if (debugIsOn) {
        return;
    }
    // https://stackoverflow.com/questions/6840326/how-can-i-create-and-style-a-div-using-javascript
    let div = document.createElement('div');
    div.id = "targetLog";
    div.setAttribute('class', 'logging'); // this works
    div.style.color = "yellow";
    div.innerHTML = "<hr><large>Debug Log Enabled</large><br><br>";
    document.getElementById("targetDiv").appendChild(div);
    debugIsOn = true;
}

function logIt(msg, msg2) {
    // console.log(msg + ((msg2)? msg2 : ""));
    var targetL = document.getElementById("targetLog");
    if (targetL) {
        targetL.innerHTML += "<pre>" + msg + "</pre>";
        if (msg2 !== undefined) {
            targetL.innerHTML += "<blockquote><pre>" + msg2 + "</pre></blockquote>";
        }
    }
}

// https://www.w3schools.com/howto/howto_js_fullscreen.asp
/* Get the element you want displayed in fullscreen mode (a video in this example): */
/* View in fullscreen */
function openFullscreen(value) {
    // let elem = document.documentElement;
    let elem = document.getElementById(value);
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { /* Firefox */
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { /* IE/Edge */
        elem.msRequestFullscreen();
    }
}

/* Close fullscreen */
function closeFullscreen() {
    if (document.exitFullscreen) {
        document.exitFullscreen();
    } else if (document.mozCancelFullScreen) { /* Firefox */
        document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
        document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) { /* IE/Edge */
        document.msExitFullscreen();
    }
    refresh();
}

// Do a PUT to set light on or off or brightness
function putUrl(path, state) {
    var json;
    if (isNaN(state) || state === true || state === false) {
        json = '{"on": ' + state + '}';
    } else {
        let bri = 255;
        if (state >=  0 && state < 255) {
            bri = state;
        }
        json = '{"bri": ' + state + '}';
    }
    // var json = '{"on": ' + state + ', "bri": 200 }';

    var xhr = new XMLHttpRequest();
    let url = path;
    xhr.open("PUT", url, true);
    xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
    xhr.onload = function () {
        var obj = JSON.parse(xhr.responseText);
        if (xhr.readyState == 4 && xhr.status == "200") {
        	  logIt("PUT: Success: Response:", JSON.stringify(obj, null, 4));
        } else {
        	  logIt("PUT: Failed: " + xhr.readyState + " " + xhr.status);
        }
    }
    xhr.send(json);
    logIt( "PUT: " + url + " => ", json);
    return false;
}

function specialButtons(fullScreenMode) {
    function mkButton(label, fn) {
        return '<button onclick="' + fn + ';" style="margin: 0.5em;"><h1>' + label + '</h1></button>'
    }
    let strButtons = '<h1>&nbsp;</h1><hr><span><center>';
    if (fullScreenMode !== true) {
        strButtons += mkButton("Full Screen", "openFullscreen(\'targetDiv\')");
        strButtons += mkButton("Normal", "closeFullscreen()");
        strButtons += mkButton("Refresh", "doRefresh()");
    }
    strButtons += mkButton("Debug On", "debugOn()");
    strButtons += '</center></span>';
    return strButtons;
}

function clearElement(byId) {
    var div = document.getElementById(byId);
    while(div.firstChild){
        div.removeChild(div.firstChild);
    }
}

function buildRemote(site) {
    function mkButton(id, state, label) {
        let url = site + "/api/nobody/lights/" + id + "/state";
        return '<a id="id' + id + '-' + label + '" title="Click for ' +
                label + '" href="#" onclick="putUrl(\'' + url + '\', ' + state +
                ');return false;" class="myButton' + label + '">' + label + '</a>';
    }
    function addDevice(i, jData) {
        let dimmable = false;
        if (jData[i].dimUrl) {
            let jItem = JSON.parse(jData[i].dimUrl);
            if (jItem) {
                dimmable = true;
            }
        }
        let html = '<tr>';
        html += '<td style="text-align:center;">' + mkButton(jData[i].id, true, "On") + '</td>';
        html += '<td style="text-align:center;" class="device">' + jData[i].name + '</td>';
        html += '<td style="text-align:center;">' + mkButton(jData[i].id, false, "Off") + '</td>';
        html += '</tr>';
        html += '<tr><td>';
        // target.innerHTML += "<pre>" + jData[i].id + ", " + jData[i].name + ", " + ((dimmable)? "Dimmable" : "Not dimmable") + "</pre>";
        return html;
    }
    if (refresh) {
        clearElement("targetDiv");
        // var target = document.getElementById("targetDiv");
        // target.innerHTML = "";
        if (debugIsOn) {
            debugIsOn = false;
            debugOn();
        }
    }
    let pathFile = site + '/api/devices';
    fetch(pathFile, {mode: "cors"}).then(function (response) {
        if (response.status === 404) {
            alert("Oops! 404 Missing file: " + pathFile);
            logIt("Fetch failed (404): Missing file: " + pathFile);
            return;
        }
        if (response.status !== 200) {
            logIt("Fetch failed with status: " + response.status);
            return;
        }
        response.text().then(function (data) {
            let jData = JSON.parse(data);
            // For possible issues with stringify see https://stackoverflow.com/questions/957537/how-can-i-display-a-javascript-object
            logIt("Fetch response from: " + pathFile, JSON.stringify(jData, null, 4));
            let html = '<table align="center"><tbody>';
            if (order === undefined) {
                for (let i=0; i<jData.length; i++) {
                    html += addDevice(i, jData);
                }
            } else {
                for (let j=0; j<order.length; j++) {
                    for (let i=0; i<jData.length; i++) {
                        if (jData[i].id === order[j])
                            html += addDevice(i, jData);
                    }
                }
            }
            html += '</tbody></table>';
            if (requestButtons) {
                let fullScreenMode = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;
                html += specialButtons(fullScreenMode);
            }
            var target = document.getElementById("targetDiv");
            if (debugIsOn) {
                // Move debug log after remote keypad.
                let savedLog = target.innerHTML;
                target.innerHTML = html;
                target.innerHTML += savedLog;
            } else {
                target.innerHTML = html;
            }
        });
    }).catch(function (err) {
        logIt("Fetch Error :-S", err);
    });
    refresh = false;
}

function getUrlVars() {
    var vars = {};
    window.location.href.replace(/[?&]+([^=&]+)(?:=|)([^&]*)/gi, function (ignore, key, value) {
        vars[key.toLowerCase()] =
        (
            (value === "")
            ? true
            : value
        );
    });
    return vars;
}

function getUrlParam(parameter, defaultvalue) {
    var urlparameter = defaultvalue;
    if (window.location.href.indexOf("?") > -1) {
        urlparameter = getUrlVars()[parameter];
    }
    if (urlparameter === undefined) {
        urlparameter = defaultvalue;
    }
    return urlparameter;
}

var order = getUrlParam("order");
if (order !== undefined) {
    order = order.split(',');
}
var site = getUrlParam("http", '');

var requestLog = getUrlParam("log", false);
if (requestLog == false) {
    requestLog = getUrlParam("debug", false);
}

var requestButtons = getUrlParam("buttons", false);

function doRefresh() {
    refresh = true;
    buildRemote(site);
}

if (requestLog) {
    debugOn();
}

buildRemote(site);

</script>
</body>
</html>
